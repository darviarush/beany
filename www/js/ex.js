// Generated by CoffeeScript 1.4.0
(function() {
  var Baby, Human, cubes, math, matt, num, number, opposite, race, square,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Human = (function() {

    function Human(name) {
      this.name = name;
      this.dear = true;
    }

    return Human;

  })();

  Baby = (function(_super) {

    __extends(Baby, _super);

    function Baby() {
      return Baby.__super__.constructor.apply(this, arguments);
    }

    Baby.prototype.say = function(msg) {
      return alert("" + this.name + " говорит '" + msg + "'");
    };

    Baby.prototype.sayHi = function() {
      return this.say('Уууу!');
    };

    return Baby;

  })(Human);

  matt = new Baby("Матвей");

  matt.sayHi();

  number = 42;

  opposite = true;

  if (opposite) {
    number = -42;
  }

  square = function(x) {
    return x * x;
  };

  math = {
    root: Math.sqrt,
    square: square,
    cube: function(x) {
      return x * square(x);
    }
  };

  race = function() {
    var runners, winner;
    winner = arguments[0], runners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return print(winner, runners);
  };

  if (typeof elvis !== "undefined" && elvis !== null) {
    alert("I knew it!");
  }

  cubes = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      num = list[_i];
      _results.push(math.cube(num));
    }
    return _results;
  })();

}).call(this);
