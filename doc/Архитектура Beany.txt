= Архитектура Beany =

Используется модель MVC. Однако:

Модель и контроллер на стороне сервера. Отображение на стороне клиента

Функции контроллера: 
1. авторизация
2. аутентификация
3. валидация полученных параметров
4. реализация логики запроса посредством модели, файлов и т.д. Установка кук
5. возврат данных в виде JSON

Функции модели:
1. предоставлять контроллерам операции для работы с базой данных
2. прозрачно (без усилий со стороны программиста) эскейпить параметры запросов
3. кэшировать SQL-запросы
4. преобразовывать полученные из базы данные в нужный формат (дату, время и т.п.)

Функции отображения:
1. реализовывать интерфейс пользователя
2. получать необходимые данные посредством ajax-запросов через контролы
3. заполнять данными html-шаблоны (шаблон находится в div) и отображать в виджетах
4. показывать необходимые средства управления (кнопки, пункты меню и т.д. в зависимости от роли). Админка совмещена с интерфейсом пользователя

Плагины:
1. Все файлы плагина находятся в его папке
2. Подключаются к проекту в конфигурационном файле
3. Повторяют модель MVC проекта, органично добавляют свою модель, контроллер и отображение в проект

Устройство контроллера
1. Реализованы в виде конфигурации (ассоциативного массива)
2. В ассоциативном массиве перечисляются параметры (см. функции контроллера)
Например:
change_password => [
// 1. авторизация
// 2. аутентификация
role => "self",
// 3. валидация полученных параметров
param => [old_password=>"password", new_password=>"password", user_id=>"id"],
// 4. реализация логики запроса посредством модели, файлов и т.д. Установка кук
model => "change_user_password", // но если не указывать - совпадает с названием контроллера, если не указан func
// или вызвать функцию вместо модели func => "ex_func",
// 5. возврат данных в виде JSON
]

== Ошибки ==

Ошибки возвращаются, если вызов контрола завершился неудачно.

100 - нет такого контрола
200 - ошибка аутентификации
300 - ошибка авторизации
400 - ошибки валидации
500 - ошибка исполнения
599 - произошёл сбой (какое-то неизвестное исключение)

Формат ошибки в ответе JSON:
{
error: 599,
message: "division by zero!"
}

Внимание! В правильном ответе не делжно быть ключа "error". Используйте его для проверки ответа на ошибку.

== Ответы ==

Ответы определяются контроллерами. Однако наборы записей выдаются в формате:

 [[поля], [запись1], [запись2] ...]

Например:
 [[id, name, x], [4, "Имя1", 1] ...]

В такой формат переводит сам контроллер, если вернуть из обрабатывающей функции множество бинов.

== Доступ к контроллеру ==

Определяется свойством '''access''' в конфигурации контроллера

Аутентификация - проверка залогинен пользователь или нет<br>
Авторизация - проверяются права пользователя на пользование контроллера, к которому он обратился

Аутентификация
# all - контрол доступен и для залогинившихся пользователей и для "гостей"
# authall - только для залогинившихся. Права не проверяются
# noauth - только для "гостей"
# self - может выполнять только залогинившийся пользователь. Но контроллер использует идентификатор этого пользователя для определённой в нём операции. Например, пользователь может поменять себе пароль, но другому - не может

Авторизация
# auth - пользоватся контролом может только залогинившийся пользователь, причём имеющий на него права, указанные в его роли.

Основные роли:
tenant - арендатор
lessor - арендодатель
admin - администратор


== Плагины ==

Ядро проекта содержит только основные средства:
1. обслуживание контроллеров
2. интерфейс ввода запросов (http-сервер)
3. обслуживание плагинов
4. утилиты

Всё остальное находится в плагинах.

Плагины разделены: серверная часть находится в папке plugin/плагин глядя из корня проекта, а клиентская - в www/plugin/плагин.

Например:

plugin/av/av.php - подгружается через require, добавляет контроллеры
plugin/av/avTest.php - тест, создаёт модель

Остальные файлы и подпапки - какие угодно.

www/plugin/av/av.html - кусок html-страницы. Во время разработки плагина подгружается к основной странице динамически (ajax-запросом). На стадии сборки проекта будет вставлена в главную страницу, вместе с css и js, которые подключает. 

Остальные файлы и подпапки - какие угодно.

Плагины подключаются к проекту в файле www/js/plugin.js
