= Автоматизированные тесты =

== Введение ==

Если вы не используете автоматизированные тесты, то поступаете так: 
1. Правите что-то в коде
2. Запускаете программу
3. Вводите через интерфейс программы какие-то параметры, чтобы узнать - верно работает исправленный код или нет
4. Программа зачастую падает со страшным треском и приходится переходить на пункт 1

Другими словами не всегда получается с первой попытки безошибочно написать код. А если это и удаётся, то часто приходится его дописывать, причём вбивать те же параметры, что и во время прошлого тестирования.

Сделав автоматизированный тест можно запускать его сколько угодно - тест будет вбивать параметры за вас и проверять результаты - правильно ли работает программа.
Кроме того тест останется на будущее и вы всегда будете спокойны, что тот участок кода для которого вы уже написали тест работает правильно, а не сламался из-за поправленной вами функции где-то ещё, которую он вызывает.

=== Виды тестов ===

Автоматизированными можно сделать тесты следующих типов:
1. unit-тесты - они запускают не всю программу, а только её часть - отдельную функцию или класс и их тестируют
2. Приёмочные или функциональные, которые эмулируют действия пользователя с интерфейсом программы
3. Тесты производительности - тестируют при какие нагрузки выдерживает программа.
3.1. Нагрузочные тесты - проверяют производительность программы при заданных нагрузках
3.2. Стресс-тесты - постепенно повышают нагрузку, пока программа не "упадёт". Они позволяют определить максимальную нагрузку выдерживаемую приложением
3.4. Тесты стабильности - позволяют убедиться в том, что приложение выдерживает ожидаемую нагрузку в течение длительного времени и нет утечки ресурсов, например, памяти
3.5. Конфигурационные тесты - тестируют влияние конфигурации проекта на производительность. Например, отключили вы плагин пожирающий 90% памяти - приложение шустрее и заработало

Конечно ещё существует много тестов. См. http://ru.wikipedia.org/wiki/Системное_тестирование

== unit-тестирование ==

Для unit-тестирования используют специальную библиотеку или фреймворк.

Вот их неполный список:  PHP (PHPUnit), JavaScript (jsFUnit), C# (NUnit), Python (PyUnit), Fortran (fUnit), Delphi (DUnit), Free Pascal (FPCUnit), Perl (Test::Unit), C++ (CPPUnit), Flex (FlexUnit), COS (COSUnit).
<br>Их родоначальником является jUnit (Java). Хотя существуют совершенно непохожие на него библиотеки для тестирования.

=== unit-тестирование на php ===

Допустим нам надо написать функцию возвращающую энное число из последовательности чисел Фибоначчи.

Вот эта последовательность:
__n: 0 1 2 3 4 5 6 7 ...
fib: 0 1 1 2 3 5 8 13 ...

То есть, сумма двух предыдущих чисел этой последовательности и будет следующим числом: Fn = Fn-1 + Fn-2.

Обычно автоматизированный тест пишут до написания функции. При этом рассматривают:
1. Терминальные (начальные) ситуации
2. Случаи, когда значения параметров выходят за допустимые рамки
3. И какой-то обычный случай

<source lang=php>
<?php
require_once 'PHPUnit/Autoload.php';
require_once 'Fib.php'; // в этом модуле находится функция fib

class FibTest extends PHPUnit_Framework_TestCase { // называем класс теста так же как модуль или класс, который будем тестировать, только с Test на конце
    public function testFib() {	// называем метод теста так же как функцию, которую тестируем, только с test вначале
		// терминальные ситуации:
		$this->assertEquals(fib(1), 1);
        $this->assertEquals(fib(2), 1);
		// обычный случай:
		$this->assertEquals(fib(7), 13);
		// параметры выходят за допустимые рамки:
		$this->assertEquals(fib(0), 0);
		$this->assertEquals(fib(-10), 0);
    }
}
</source>

Запускаем:
 $ phpunit tests
 Warning: require_once(Fib.php): failed to open stream: No such file or directory
 in /home/ya.kosmina/beany/tests/FibTest.php on line 3

 Fatal error: require_once(): Failed opening required 'Fib.php' (include_path='.:
/usr/local/lib/php') in /home/ya.kosmina/beany/tests/FibTest.php on line 3

Эти ошибки означают, что нет Fib.php.<br>Надо его создать:
<source lang=php>
<?php

function fib($n) {}
</source>

Запустим ещё раз. 
 
 $ phpunit tests

 F

 Time: 0 seconds, Memory: 1.50Mb

 There was 1 failure:

 1) FibTest::testFib
 Failed asserting that 1 matches expected null.

 tests/FibTest.php:8

 FAILURES!
 Tests: 1, Assertions: 1, Failures: 1.

Ну вот - тесты не прошли. Настала пора написать саму функцию.

<source lang=php>
<?php

function fib($n) { return $n<=0? 0: $n<=2? 1: fib($n-1)+fib($n-2); }
</source>

 $ phpunit tests
 Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
 65488 bytes) in /home/ya.kosmina/beany/tests/Fib.php on line 3
 
Ну вот и ошибка. Правим:

<source lang=php>
<?php

function fib($n) {
	if($n<=0) return 0;
	if($n<=2) return 1;
	return fib($n-1) + fib($n-2);
}
</source>

 $ phpunit tests

 .

 Time: 0 seconds, Memory: 1.50Mb

 OK (1 test, 5 assertions)
 
Все тесты прошли!

Ссылки:
1. jsfunit / jsfunit.sf.net
1. http://www.phpunit.de/manual/current/en/index.html
2. http://habrahabr.ru/post/56289/

== Тестирование javascript ==

